FUNCTIONS:
Server:
	-manage the experiments
	-serve up the texts
	-record the test results

Client - reader:
	-present the texts in three different ways:
		.full page
		.RSVP optimized per literature
		.Spritz per API

Client - writer/tester:
	-present multiple choice question(s) testing comprehension of the texts
	-offer writing interface for responding to the texts

-------------------------------------------------------------------------------------------

Set of experiments:
	-pseudo-random distribution of texts to presentation methods, ensuring even and complete coverage of every text in every experiment

Experiment:
	-set of texts
	-order of presentation
	-presentation is 2 texts per method
	-results recorded from tests (2+ per text)
		.answers
		.response times

Text:
	-tweet with some metadata and hashtags
	-multiple choice question(s) about the content
		.Q: does the order of presentation of the answers get randomized? Yes
	-probably 12
	-1 MongoDB record with the various attributes
	 {
	 	tweet: {
	 		text: String,
	 		author: String,
	 		date: String,
	 		hashtags: [tag: String]
	 	}
	 	test: {
	 		question: String,
	 		correct_answer: String,
	 		incorrect_answers: [answer: String]
	 	}
	 }

Participants:
	-person meeting some conditions (control variables)
	-particular experiment that they took
	-their responses to the tests

-------------------------------------------------------------------------------------------

USE:

0. Study director interacts with client tester to initiate a new participant's session, by recording their particulars and instructing the server to start
1. Participant clicks/taps client reader 'READ' button to request a new text
	-button is the full watch screen, to prime the focus point/area
	-until the server receives a participant's particulars, the AJAX request is 'ignored', client continues to display the button (no errors)
	-during a session, server must have received a response to a previously sent text before sending a new one
2. Server sends a JSON with the tweet and the text presentation method; server is also ready to serve up questions on request, or simply delays the response to the client tester for a setTimeout after the tweet is sent to client reader
3. Participant reads the text as presented by the client reader page script, with a setTimeout until blacking out.
4. Participant then moves to the client tester device, and answers the question(s) and writes a tweet response
	-question(s) are hidden until the participant clicks to display them, upon which a timer also starts and only stops when the particpant clicks the submit button (Q: is the participant made aware that they are being timed?)

X. Hiccoughs:
	-double-entry of participants; correcting participant records
	-ending sessions before all texts are read
	-hitting 'Back' or 'Refresh' buttons
		-which REALLY requires the server to be running as a state-machine
	-what is participant misses a text during its presentation ?
	 .only study director can make a redo; probably need a recovery procedure for this
	-

-------------------------------------------------------------------------------------------

SERVER BEHAVIOUR:

Define it as finite-state automaton (FSA).

TODO: Draw up the states and input sequences, then code it.